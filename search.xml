<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[git常用操作及总结]]></title>
      <url>%2F2017%2F03%2F06%2Fgit%E6%95%99%E7%A8%8B%2F</url>
      <content type="text"><![CDATA[如果你已经安装了git的话，主要内容告诉你在使用Git完成各种工作中将使用的各种命令。如果你看完了主要内容，应该就能配置初始化一个仓库(repository)、开始或停止跟踪(track)文件和文件模式、如何迅速而简单地撤销错误操作、如何浏览你的项目的历史版本以及不同提交(commits)间的差异、如何向你的远程仓库推送(commit)、以及如何从你的远程仓库拉取(pull)文件。 一.获取git仓库 有两种取得Git项目仓库的方法。第一种是在现有项目或目录下导入所有文件到Git中；第二中是从一个服务器或者github克隆一个现有的Git仓库。 1.在你新建的文件夹来建一个新的仓库如果你打算使用Git来对现有的项目进行管理，你只需要进入该项目所在的文件夹并且输入 12cd learn 进入你新建文件夹中git init 建立一个新的仓库 如果你在一个已经存在文件的文件夹里建立了一个新仓库，你应该开始跟踪这些文件并提交。 你可通过 git add 命令来实现对指定文件的跟踪，然后执行 git commit 提交： 123$ git add .$ git add work$ git commit -m&quot; new version&quot; 一般，刚建立的文件夹，仓库都是新的。不需要上面的那些命令 2.克隆你以前的仓库或者别人的仓库 如果你想获得一份已经存在的Git仓库的话，比如，你想为某个开源项目贡献自己的一份力，这时就要用到git clone命令。git克隆的是Git仓库服务器上的几乎所有数据。而不是仅仅赋值完成你的工作所需要文件。当你执行git clone命令的时候，默认配置下远程仓库中的每一个文件的每一个版本都将被拉去下来。可以用下面的命令 1$ git clone http://github.com/jack/learn 这会在当前目录下创建一个名为“learn”的文件夹在你的电脑上，并在这个目录下初始化一个.git文件夹，从远程仓库拉取下所有数据到你的文件夹里，如果你想自定义本地仓库的名字，可以在后面 添加 你的名字 二、记录每次更新到仓库 现在我们手上有了一个Git仓库，并从这个仓库取出了所有文件的工作拷贝。接下来，对这些文件做了修改，在完成了一个阶段的目标后，提交每次跟新到仓库。 一般文件都处于未修改，已修改，或已放入暂存区。工作目录中除已跟踪文件以外的所有文件都属于未跟踪文件，它们即不存在于上次快照的记录中，也没有放入暂存区。初次克隆某个仓库的时候，工作目录中的所有文件都属于已跟踪文件，并处于未修改状态。 编辑修改某些文件之后，由于上次提交后，你对它们做了修改，Git将它们标记为已修改文件。我们逐步将这些修改过的文件放入暂存区，再提交素有暂存了的修改 文件从本地 到暂存区 到远程仓库。简称文件处于什么状态，可以用 git status 简写“git st”,如果在克隆仓库后立即使用git st 会看到没有可以提交的，说明都没有被修改。 123$ git statuson branch masternothing to commit ,working directory clean 这些信息，告诉你当前目录没有出现任何处于未跟踪状态的新文件，否则Git会列出来，最后改命令还显示了当前所在分支，并告诉你这个分支同远程服务器上对应的分支没有偏离。现在分支名是”master”,这是默认的分支名。我们在Git分支后会降到。现在，让我们在项目下新建一个新的README文件，如果之前并不存在这个文件，使用 git status 命令你会看到新的未跟踪文件： 123456$ git statuson branch masterUntracked files: (use &quot;git add &lt;file&gt;..&quot; to include in what will be commited) READMEnothing added to commit but untracked files present (use &quot;git add&quot; to track) 在状态报告中可以看到新建的README文件出现在Untracked files 下面。未跟踪的文件以为这Git在之前的快照中没有这些文件。 1.添加新文件使用命令 git add 开始跟踪一个文件。所以，要跟踪README文件，运行 1$ git add README 此时再运行git status 命令， 会看到README 文件已被跟踪，并成功并处于暂存状态： 12345$ git statuson branch masterchanges to be commited: (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage) new file: README 只要在Change to be commited 这行下面的，就说明是已暂存状态，如果此时提交，那么该文件此时此刻的版本将被留存在历史历史记录中。 2.暂存已修改文件 现在我们来修改一个已被跟踪的文件。如果你修改了一个名字为index.html的已被跟踪文件然后运行 git status 命令，会看到以下内容： 123456789$ git statuson branch masterchange to be commited: (use &quot;git reset HEAD &lt;file&gt;..&quot; to unstage) new file: READMEChanges not staged for commit: (use &quot;git add &lt;file&gt;...&quot; to upadte what will be commited) (use &quot;git checkout --&lt;file&gt;..&quot; to discared changes in working directory) modified: index.html 文件index.html出现在Changes not staged for commit 这行下面，说明已跟踪文件的内容发生了变化，但还没有放到暂存区，需要git add 命令 1234567$ git add index.html$ git statuson branch masterChanges to be commited: (use &quot;git reset HEAD &lt;file&gt;..” to unstage)new file: READMEmodified: index.html 现在两个文件都已被暂存，下次提交时就会一并记录到仓库，假设此时你想要在 index.html 里再加条注释，重新编辑存盘后，准备提交。再git status 你会发现： 1234567891011$ vim index.html$ git ston branch masterchanges to be commited: (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage) new file: README modified: index.htmlchanges not staged for commit: (use &quot;git add &lt;file&gt;...&quot; to discard changes in working directory) (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory) modified: index.html 出现了两个 index.html，同时出现在暂存区和非暂存区。git只不过暂存了你运行git add 命令的版本，如果你现在提交。idnex.html的版本是你最后一次运行 git add 命令的那个版本。而不是你运行 git commit 时，在工作目录中的当前版本，所以你需要重新git add。 3.查看已暂存和未暂存的修改 如果git status，输出不知道具体修改了什么，可以用git diff命令假如再次修改README 文件后暂存，然后编辑index.html文件后先不暂存,查看尚未暂存的文件更新了哪些部分，不加参数，直接输入 git diff 1234567891011121314$ git diffdiff --git a/index.html b/index.html--- a/index.html+++ b/index.html@@ -65,7 +65,8 @@ branch directly, things can get messy. Please include a nice description of your changes when you submit your PR; if we have to read the whole diff to figure out why you&apos;re contributing in the first place, you&apos;re less likely to get feedback and have your change-merged in.+merged in. Also, split your changes into comprehensive chunks if your patch is+longer than a dozen lines. If you are starting to work on a particular area, feel free to submit a PR that highlights your work in progress (and note in the PR title that it&apos;s 4.提交更新现在的暂存区已经可以提交了，再此之前看看是否有没被提交的 123$ git commit -a -m &apos;added new benchmarks&apos;[master 83e38c7] added new benchmarks 1 file changed, 5 insertions(+), 0 deletions(-) 5.移除文件 要从git中移除某个文件，就必须要从已跟踪文件清单中移除（确切的说，是从暂存区中移除），然后提交，可以用 git rm 命令完成此项工作，并连带从工作目录中删除指定的文件，这样以后就不会出现在未跟文件清单中了。如果只是本地文件夹里删除文件，运行git status 时就会看到 123456789$ rm index.html$ git statuson branch masterYour branch is up-to-date with &apos;origin/master&apos;.Changes not staged for commit: (use &quot;git add/rm &lt;file&gt;...&quot; to update what will be commited) (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory) deleted: index.html 然后在运行git rm 记录此次移除文件的操作： 12345678$git rm index.htmlrm &apos;index.html&apos;$git ston branch masterChanges to be commited: (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage) deleted: index.html 下一次提交时，该文件就不再纳入版本管理了，如果删除之前修改过而且已经放到暂存区，则必须要用强制删除选项-f如果只是想将它从git仓库里（即从暂存区域移除），但仍然希望保留在当前工作目录中，换句话说，你想让文件保留在磁盘中，但是不想被git 追踪，可以使用 –cached 选项 1$ git rm --cached README 6.移动文件要在git 中对文件改名，可以这么做： 1$ git mv file_from file_to 你会明白关于重命名操作的说明 1234567$ git mv README.md README$ git statuson branch masterChanges to be commited: (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage) renamed: README.md -&gt; README 其实，git mv 相当于运行了下面的三条命令 123$ mv README.md README$ git rm README.md$ git add README 如此分开操作，也是重命名 三、查看提交历史 在提交了若干更新，有或者克隆了某个项目之后，你也许想回顾选下提交历史。可以用git log 命令我从github 上clone 一个项目用于演示 1git clone https://github.com/schacon/simple-progit 然后在此项目中运行git log, 应该会看到下面的输出： 123456789101112131415161718$ git logcommit ca82a6dff817ec66f44342007202690a93763949Author: Scott Chacon &lt;schacon@gee-mail.com&gt;Date: Mon Mar 17 21:52:11 2008 -0700 changed the version numbercommit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7Author: Scott Chacon &lt;schacon@gee-mail.com&gt;Date: Sat Mar 15 16:40:33 2008 -0700 removed unnecessary testcommit a11bef06a3f659402fe7563abf99ad00de2209e6Author: Scott Chacon &lt;schacon@gee-mail.com&gt;Date: Sat Mar 15 10:31:28 2008 -0700 first commit git log 会按提交时间列出所有的更新，最新的在最上面。正如你所看到的，这个命令会列出每个SHA-1校检、作者的名字和电子邮件地址，提交时间和提交说明一个常用的选项是 -p 用来显示每次提交的内容差异，你也可以加上 -2 来仅显示最近两次提交 1234567891011121314151617181920212223242526272829303132333435363738394041$ git log -p -2commit ca82a6dff817ec66f44342007202690a93763949Author: Scott Chacon &lt;schacon@gee-mail.com&gt;Date: Mon Mar 17 21:52:11 2008 -0700 changed the version numberdiff --git a/Rakefile b/Rakefileindex a874b73..8f94139 100644--- a/Rakefile+++ b/Rakefile@@ -5,7 +5,7 @@ require &apos;rake/gempackagetask&apos; spec = Gem::Specification.new do |s| s.platform = Gem::Platform::RUBY s.name = &quot;simplegit&quot;- s.version = &quot;0.1.0&quot;+ s.version = &quot;0.1.1&quot; s.author = &quot;Scott Chacon&quot; s.email = &quot;schacon@gee-mail.com&quot; s.summary = &quot;A simple gem for using Git in Ruby code.&quot;commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7Author: Scott Chacon &lt;schacon@gee-mail.com&gt;Date: Sat Mar 15 16:40:33 2008 -0700 removed unnecessary testdiff --git a/lib/simplegit.rb b/lib/simplegit.rbindex a0a60ae..47c6340 100644--- a/lib/simplegit.rb+++ b/lib/simplegit.rb@@ -18,8 +18,3 @@ class SimpleGit end end--if $0 == __FILE__- git = SimpleGit.new- puts git.show-end\ No newline at end of file 四、撤销操作 在任何一个阶段，你都有可能想要撤销某些操作，这里，我们将会学习几个撤销你所做的修改有时候我们提交完了才发现漏掉了几个文件没有被添加，或者提交信息写错了。此时，可以运行带有 –amend 选项的提交命令尝试重新提交 1$ git commit --amend 这个命令会将暂存中的文件提交。如果你提交后发现忘记了暂存某些需要的修改，可以像下面这样操作 123$ git commit -m &apos;initial commit&apos;$ git add forgotten-file$ git commit --amend 五、远程仓库的使用 为了能在任意Git项目上协作，你需要知道如何管理自己的远程仓库。远程仓库是指托管在网络上的版本库，你可以有好几个远程仓库，有的可以读，有的可以读写，与他人协作涉及管理远程仓库以及根据需要推送或拉去数据。管理远程仓库包括了解如何添加远程仓库、移除无效的仓库，管理不同的远程分支并定义他们是否被跟踪等等。在本节中，我们将介绍一部分远程管理的技能。 1.查看远程仓库 如果你想查看你已经配置的远程仓库服务器，可以运行git remote 命令。它会列出你指定的每一个远程服务器的简写。如果你已经克隆了自己的仓库，那么至少应该能看到 origin- 这是Git 给你克隆的仓库服务器的默认名字 123456789$ git clone http://github.com/schacon/ticgitCloning into &apos;ticgit&apos;...remote: Reusing existing pack: 1857, done.remote: Total 1857 (delta 0), reused 0 (delta 0)Receiving objects: 100% (1857/1857), 374.35 KiB | 268.00 KiB/s, done.Resolving deltas: 100% (772/772), done.Checking connectivity... done.$ cd ticgit$ git remote origin 你也可以制定选项-v,会显示需要读写远程仓库使用的Git保存的简写与其对应的URL 123$ git remote -v origin https://github.com/schacon/ticgit(fetch)origin https://github.com/schacon/ticgit(push) 如果你的远程仓库不止一个，该命令会将它们全部列出。例如，与几个协作者合作的，拥有多个远程仓库的仓库看起来像这样 123456789101112$cd grit$git remote -vbakkdoor https://github.com/bakkdoor/grit (fetch)bakkdoor https://github.com/bakkdoor/grit (push)cho45 https://github.com/cho45/grit (fetch)cho45 https://github.com/cho45/grit (push)defunkt https://github.com/defunkt/grit (fetch)defunkt https://github.com/defunkt/grit (push)koke git://github.com/koke/grit.git (fetch)koke git://github.com/koke/grit.git (push)origin git@github.com:mojombo/grit.git (fetch)origin git@github.com:mojombo/grit.git (push) 这样我们可以轻松拉取其中任何一个用户的贡献。此外，我们大概还会有某些远程仓库的推送权限。 2.添加远程仓库 之前提到并展示了如何添加远程仓库的示例，运行 git remote add 添加一个新的远程Git仓库，同时指定一个你可以轻松引用的简写 1234567$ git remote origin $ git remote add pb https://github.com/paulboone/ticgit$ git remote -vorigin https://github.com/schacon/ticgit(fetch)origin https://github.com/schacon/ticgit(push)pb https://github.com/paulboone/ticigit(fetch)pb https://github.com./paulboone/ticigit(push) 现在你可以在命令行中使用字符串pb来代替整个URL。例如，如果你想拉取Paul的仓库中有但你没有的信息，可以运行 git fetch pb 12345678$ git fetch pbremote: Counting objects: 43, done.remote: Compressing objects: 100% (36/36), done.remote: Total 43 (delta 10), reused 31 (delta 5)Unpacking objects: 100% (43/43), done.From https://github.com/paulboone/ticgit * [new branch] master -&gt; pb/master * [new branch] ticgit -&gt; pb/ticgit 现在Paul的master分支可以在本地通过pb/master访问到- 你可以将它合并到自己的某个分支中，或者如果你想要查看它的话，可以检出一个指向该点的本地分支 3.从远程仓库中抓取与拉取就如刚才所见，从远程仓库中获得数据，可以执行： 1$ git fetch [remote-name] 这个命令会访问远程仓库，从中拉取你没有的数据。执行完成后，你将会拥有那个远程仓库中所有分支的引用，可以随时 合并或查看。如果你使用clone命令克隆了一个仓库，命令会自动将其添加为远程仓库并默认以”origin”为简写。所以，git fetch orgin 会抓取克隆(或上一次抓取)后新推送的所有工作。当准备好时你必须手动将其合并入你的工作。如果你有一个分支设置为跟踪一个远程分支，可以使用git pull命令来自动抓取然后合并远程分支到当前分支。这对你来说可能是一个更简单或更舒服的流程；默认情况下，git clone命令会自动设置本地 master分支跟踪克隆的远程仓库的master分支(或不管是什么名字的默认分支)。运行git pull通常会从最初克隆的服务器上抓取数据并自动尝试合并到当前分支 4.推送到远程仓库当你想分享你的项目时，必须将其推送到上游。这个命令很简单 git push [remote-name][branch-name]。当你想要将master分支推送到origin 服务器时，那么运行这个命令就可以 1$ git push origin master 只有当你克隆服务器的写入权限，并且之前没有人推送过时，这条命令才生效。当你和其他人在同一时间克隆，他们先推送到上游然后你在推送到上游，你的推送就会被拒绝，你必须先将他们的工作拉取下来并将其合并进你的工作后才能推送。 5.查看远程仓库如果想要查看某一个远程仓库的更多信息，可以使用git remote show[remote-name] 命令。如果想以一个特定的缩写名运行这个命令，例如origin，会得到像下面的信息： 123456789101112$ git remote show origin*remote origin Fetch URL: https://github.com/schacon/ticgit Push URL: https://github.com/schacon/ticgit HEAD branch: master Remote branches: master tracked dev-branch tracked Local branch configured for &apos;git pull&apos;: master merges with remote master Local ref configured for &apos;git push&apos;: master pushes to master (up to date) 它同样会列出远程仓库URL与跟踪分支的信息。这些信息非常有用，它告诉你正处于master分支，并且如果运行git pull，就会抓取所有的远程应用，然后将远程master分支合并到本地master分支。它也会列出拉取到的所有远程应用。 6.远程仓库的移除与重命名如果想要重命名引用的名字可以运行git remote rename 去修改一个远程仓库的简写名。例如，想要将pb重命名为paul,可以用git remote renmae 这样做： 12$git remote rename pb paul$git remote origin paul 值得注意的是这同样也会修改你的远程分支名字。那些过去引用pb/master的现在回引用paul/master。如果因为一些原因想要移除一个远程仓库-你已经从服务器上搬走了或不想使用某一个特定的镜像了，又或者某一个贡献者不再贡献了-可以使用gitremote rm: 12$git remote rm paul$git remote origin]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Emmet for sublime HTML/CSS代码编写神器]]></title>
      <url>%2F2016%2F12%2F19%2FEmmet-for-sublime%2F</url>
      <content type="text"><![CDATA[Emmet的简单介绍 一、快速编写HTML代码1.初始化HTML文档需要包含一些固定的标签，比如、、等，现在你只需要输入”!”或”html5”，然后按Tab键：可以迅速创建一个HTML结构 123456789&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;/body&gt; 2.轻松添加class、id、文本和属性 连续输入元素名称的ID，Emmet会自动为你补全，比如输入p#foo会生成: 1&lt;p id=&quot;foo&gt;&lt;/p&gt; 连续输入类和id,比如p.bar#foo,会自动生成： 1&lt;p class=&quot;bar&quot; id=&quot;foo&quot;&gt;&lt;/p&gt; 下面来看看如何定义HTML元素的内容和属性。你可以通过输入h1{foo}和a[href=#],就可以自动生成如下代码 12&lt;h1&gt;foo&lt;/h1&gt;&lt;a href=&quot;#&quot;&gt;&lt;/a&gt; 3.嵌套 现在你只需要一行代码就可以实现标签的嵌套。 123456789&gt;: 子元素符号， 表示嵌套的元素 p&gt;span &lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;p&gt;+: 同级标签符号 h1+h2 &lt;h1&gt;&lt;/h1&gt; &lt;h2&gt;&lt;/h2&gt;^:可以使该符号的标签提升一行 p&gt;span^p &lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;/p&gt; 4.分组，你可以通过嵌套和括号来快速生成一些代码块，比如输入(.foo&gt;h1)+(.bar&gt;h2)会自动生成如下html代码 123456&lt;div class=&quot;foo&quot;&gt;&lt;h1&gt;&lt;/h1&gt;&lt;/div&gt;&lt;div class=&quot;bar&quot;&gt;&lt;h2&gt;&lt;/h2&gt;&lt;/div&gt; 5.隐式标签 声明一个带类的标签，只需要输入div.item,就会生成 1&lt;div class=&quot;item&quot;&gt;&lt;/div&gt; 在过去版本中，可以省略掉div。现在如果只要输入。.item,则Emmet会根据父标签进行判定。比如在ul中输入.item,就会生成 1&lt;li class=&quot;item&quot;&gt;&lt;/li&gt; 下面是所有的隐式标签名称： li：用于ul和ol中 tr：用于table、tbody、thead和tfoot中 td：用于tr中 option：用于select和optgroup中 6.定义多个元素 要定义多个元素可以使用“*”符号。比如，ul&gt;li*3可以生成如下代码 12345&lt;ul&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt;&lt;/ul&gt; 7.定义多个带属性的元素 如果输入 ul&gt;li.item$*3，将会生成如下代码： 12345&lt;ul&gt; &lt;li class=&quot;item1&quot;&gt;&lt;/li&gt; &lt;li class=&quot;item2&quot;&gt;&lt;/li&gt; &lt;li class=&quot;item3&quot;&gt;&lt;/li&gt;&lt;/ul&gt; 二、css缩写1.值 比如要定义元素的宽度，只需要输入W100，即可生成 12css代码width: 100px; 除了px，也可以生成其他单位，比如输入h10p+m5e,结果如下： 1234567css代码1.height: 10%;2.margin:5em;单位别名列表： p表示% e表示em x表示ex 2.附加属性 可能你之前已经了解了一些缩写，比如@f,可以生成： 12345css代码@font-face &#123;font-family:;src: url();&#125; 3.模糊匹配 如果有哪些缩写你拿不准，Emmet会根据你的输入内容匹配最接近的语法，比如输入ov:h、ov-h、ovh都会生成 12css代码overflow: hidden; 4.供应商前缀 如果输入非W3C标准的CSS属性，Emmet会自动加上供应商前缀，比如输入trs会生成 123456css代码-webkit-transform: ;-moz-transform: ;-ms-transform: ;-o-transform: ;transform: ; 三、你还可以定制Emmet插件：1.添加新缩写或更新现有缩写，可修改snippets.json文件 2.更改Emmet过滤器和操作的行为，可修改preferences.json文件 3.定义如何生成HTML或XML代码，可修改syntaxProfiles.json文件]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[滕王阁序]]></title>
      <url>%2F2016%2F12%2F12%2F%E6%BB%95%E7%8E%8B%E9%98%81%E5%BA%8F%2F</url>
      <content type="text"><![CDATA[滕王阁序作者：王勃 年代：唐朝 豫章故郡，洪都新府。星分翼轸(zhěn)，地接衡庐。襟三江而带五湖，控蛮荆而引瓯越。物华天宝，龙光射牛斗之墟；人杰地灵，徐孺下陈蕃之榻。雄州雾列，俊采星驰。台隍枕夷夏之交，宾主尽东南之美。都督阎公之雅望，棨(qǐ)戟(jǐ)遥临；宇文新州之懿(yì)范，襜(chān)帷(wéi)暂驻。十旬休假，胜友如云；千里逢迎，高朋满座。腾蛟起凤，孟学士之词宗；紫电青霜，王将军之武库。家君作宰，路出名区；童子何知，躬逢胜饯。 时维九月，序属三秋。潦(lǎo)水尽而寒潭清，烟光凝而暮山紫。俨(yān)骖(cān)騑(fēi)于上路，访风景于崇阿(ē)。临帝子长洲，得天人之旧馆。层峦耸翠，上出重霄；飞阁流丹，下临无地。鹤汀(tīng)凫(fǔ)渚(zhǔ)，穷岛屿之萦(yíng)回；桂殿兰宫，即冈峦之体势。 披绣闼(tà)，俯雕甍(méng)，山原旷其盈视，川泽纡(yū)其骇瞩。闾(lǘ)阎(yán)扑地，钟鸣鼎食之家；舸(gě)舰迷津，青雀黄龙之舳(zhú)。云销雨霁(jì)，彩彻区明。落霞与孤鹜(wù)齐飞，秋水共长天一色。渔舟唱晚，响穷彭蠡(lǐ)之滨；雁阵惊寒，声断衡阳之浦。 遥襟甫(fǔ)畅，逸兴遄(chuán)飞。爽簌发而清风生，纤歌凝而白云遏(è)。睢(suī)园绿竹，气凌彭泽之樽；邺(yè)水朱华，光照临川之笔。四美具，二难并。穷睇(dǐ)眄(miǎn)于中天，极娱游于暇日。天高地迥(jiǒng)，觉宇宙之无穷；兴尽悲来，识盈虚之有数。望长安于日下，目吴会(kuài)于云间。地势极而南溟(míng)深，天柱高而北辰远。关山难越，谁悲失路之人？萍水相逢，尽是他乡之客。怀帝阍(hūn)而不见，奉宣室以何年？ 嗟(jiē)乎！时运不齐，命途多舛(chuǎn)。冯唐易老，李广难封。屈贾谊(yì)于长沙，非无圣主；窜梁鸿于海曲，岂乏明时？所赖君子见机，达人知命。老当益壮，宁移白首之心？穷且益坚，不坠青云之志。酌贪泉而觉爽，处涸辙(hé)(zhé)以犹欢。北海虽赊(shē)，扶摇可接；东隅(yú)已逝，桑榆非晚。孟尝高洁，空余报国之情；阮籍猖狂，岂效穷途之哭！勃，三尺为名，一介书生。无路请缨，等终军之弱冠(guàn)；有怀投笔，慕宗悫(què)之长风。舍簪(zān)笏(hù)于百龄，奉晨昏于万里。非谢家之宝树，接孟氏之芳邻。他日趋庭，叨(tāo)陪鲤对；今兹捧袂，喜托龙门；杨意不逢，扶凌云而自惜；钟期既遇，奏流水以何惭？ 呜呼！胜地不常，盛筵(yán)难再；兰亭已矣，梓(zǐ)泽丘墟。临别赠言，幸承恩于伟饯；登高作赋，是所望于群公。敢竭鄙怀，恭疏短引；一言均赋，四韵俱成。请洒潘江，各倾陆海云尔： 1234 滕王高阁临江渚，佩玉鸣鸾罢歌舞。 画栋朝飞南浦云，珠帘暮卷西山雨。 闲云谭影日悠悠，物转星移几度秋。 阁中帝子今何在？栏外长江空自流。 译文： 这里是汉代的豫章郡城，如今是洪州的都督府，天上的方位属于翼，轸两星宿的分野，地上的位置连结着衡山和庐山。以三江为衣襟，以五湖为衣带、控制着楚地，连接着闽越。物类的精华，是上天的珍宝，宝剑的光芒直冲上牛、斗二星的区间。人中有英杰，因大地有灵气，陈蕃专为徐孺设下几榻。雄伟的洪州城，房屋像雾一般罗列，英俊的人才，像繁星一样地活跃。城池座落在夷夏交界的要害之地，主人与宾客，集中了东南地区的英俊之才。都督阎公，享有崇高的名望，远道来到洪州坐镇，宇文州牧，是美德的楷模，赴任途中在此暂留。正逢十日休假的日子，杰出的友人云集，高贵的宾客，也都不远千里来到这里聚会。文坛领袖孟学士，文章的气势像腾起的蛟龙，飞舞的彩凤，王将军的武库里，藏有像紫电、青霜这样锋利的宝剑。由于父亲在交趾做县令，我在探亲途中经过这个著名的地方。我年幼无知，竟有幸亲身参加了这次盛大的宴会。 时当九月，秋高气爽。积水消尽，潭水清澈，天空凝结着淡淡的云烟，暮霭中山峦呈现一片紫色。在高高的山路上驾着马车，在崇山峻岭中访求风景。来到昔日帝子的长洲，找到仙人居住过的宫殿。这里山峦重叠，青翠的山峰耸入云霄。凌空的楼阁，红色的阁道犹如飞翔在天空，从阁上看不到地面。白鹤，野鸭停息的小洲，极尽岛屿的纡曲回环之势，雅浩的宫殿，跟起伏的山峦配合有致。 披开雕花的阁门，俯视彩饰的屋脊，山峰平原尽收眼底，湖川曲折令人惊讶。遍地是里巷宅舍，许多钟鸣鼎食的富贵人家。舸舰塞满了渡口，尽是雕上了青雀黄龙花纹的大船。正值雨过天晴，虹消云散，阳光朗煦，落霞与孤雁一起飞翔，秋水和长天连成一片。傍晚渔舟中传出的歌声，响彻彭蠡湖滨，雁群感到寒意而发出的惊叫，鸣声到衡阳之浦为止。放眼远望，胸襟刚感到舒畅，超逸的兴致立即兴起，排箫的音响引来的徐徐清风，柔缓的歌声吸引住飘动的白云。像睢园竹林的聚会，这里善饮的人，酒量超过彭泽县令陶渊明，像邺水赞咏莲花，这里诗人的文采，胜过临川内史谢灵运。（音乐与饮食，文章和言语）这四种美好的事物都已经齐备，（良辰美景，赏心乐事）这两个难得的条件也凑合在一起了，向天空中极目远眺，在假日里尽情欢娱。苍天高远，大地寥廓，令人感到宇宙的无穷无尽。欢乐逝去，悲哀袭来，我知道了事物的兴衰成败是有定数的。西望长安，东指吴会，南方的陆地已到尽头，大海深不可测，北方的北斗星多么遥远，天柱高不可攀。关山重重难以越过，有谁同情不得志的人？萍水偶尔相逢，大家都是异乡之客．怀念着君王的宫门，但却不被召见，什么时候才能够去侍奉君王呢？ 呵，各人的时机不同，人生的命运多有不顺。冯唐容易衰老，李广难得封侯。使贾谊遭受委屈，贬于长沙，并不是没有圣明的君主，使梁鸿逃匿到齐鲁海滨，难道不是政治昌明的时代？只不过由于君子安于贫贱，通达的人知道自己的命运罢了。年纪虽然老了，但志气应当更加旺盛，怎能在白头时改变心情？境遇虽然困苦，但节操应当更加坚定，决不能抛弃自己的凌云壮志。即使喝了贪泉的水，心境依然清爽廉洁；即使身处于干涸的主辙中，胸怀依然开朗愉快。北海虽然十分遥远，乘着羊角旋风还是能够达到，早晨虽然已经过去，而珍惜黄昏却为时不晚。孟尝君心地高洁，但白白地怀抱着报国的热情，阮籍为人放纵不羁，我们怎能学他那种穷途的哭泣！我地位卑微，只是一个书生。虽然和终军一样年已二十一，却无处去请缨杀敌。我羡慕宗悫那种“乘长风破万里浪”的英雄气概，也有投笔从戎的志向。如今我抛弃了一生的功名，不远万里去朝夕侍奉父亲。虽然称不上谢家的“宝树”，但是能和贤德之士相交往。不久我将见到父亲，聆听他的教诲。今天我侥幸地奉陪各位长者，高兴地登上龙门。假如碰不上杨得意那样引荐的人，就只有抚拍着自己的文章而自我叹惜。既然已经遇到了钟子期，就弹奏一曲《流水》又有什么羞愧呢？ 呵！名胜之地不能常存，盛大的宴会难以再逢。兰亭宴集已为陈迹，石崇的梓泽也变成了废墟。承蒙这个宴会的恩赐，让我临别时作了这一篇序文，至于登高作赋，这只有指望在座诸公了。我只是冒昧地尽我微薄的心意，作了短短的引言。在座诸位都按各自分到的韵字赋诗，我已写成了四韵八句。请在座诸位施展潘岳，陆机一样的才笔，各自谱写瑰丽的诗篇吧！ 古代词文中，我个人是最喜欢这篇了！]]></content>
    </entry>

    
  
  
</search>
